'use strict';
angular.module('signals',[])
.service('jugManager', function($scope) {
	var EMPTY = 'Empty';
	var FILL = 'Fill';
	var TRANSFER_OUT = 'transferOut';
	var YELLOW = 'yellow';
	var TRANSFER_IN = 'transferIn';
	// var $content = $( '#content' );

	var eventHistory = [];
	var writeToDom = function ( eventName, data ) {
		eventHistory.push({eventName: eventName, data: JSON.stringify(data, null, 4)})
		// $content.prepend( '<div class="event-item"><h3>' + eventName + '</h3><div><pre>' + JSON.stringify( data, null, 4 ) + '</pre></div>' );
	};

	// Child FSM
	var jug1 = new machina.Fsm( {
		namespace: 'jug1',
		initialState: 'uninitialized',
		reset: function() {
			this.transition( 'transferIn' );
		},
		states: {
			uninitialized: {
				'*': function() {
					this.deferUntilTransition();
					this.transition( 'transferIn' );
				}
			},
			transferIn: {
				_onEnter: function() {
					this.timer = setTimeout( function() {
						this.handle( 'timeout' );
					}.bind( this ), 5000 );
					this.emit( 'jug1', { status: TRANSFER_IN } );
				},
				timeout: 'transferIn-interruptible',
				jug2Waiting: function() {
					this.deferUntilTransition( 'transferIn-interruptible' );
				},
				_onExit: function() {
					clearTimeout( this.timer );
				}
			},
			'transferIn-interruptible': {
				jug2Waiting: 'yellow'
			},

			transferOut: {
				_onEnter: function() {
					this.timer = setTimeout( function() {
						this.handle( 'timeout' );
					}.bind( this ), 1000 );
				},
				_reset: 'transferIn',
				_onExit: function() {
					clearTimeout( this.timer );
				}
			}
		}
	} );

	// // Child FSM
	var jug2 = new machina.Fsm( {
		namespace: 'jug2-signal',
		initialState: 'uninitialized',
		reset: function() {
			this.transition( 'walking' );
		},
		states: {
			uninitialized: {
				'*': function() {
					this.deferUntilTransition();
					this.transition( 'walking' );
				}
			},
			walking: {
				_onEnter: function() {
					this.timer = setTimeout( function() {
						this.handle( 'timeout' );
					}.bind( this ), 30000 );
					this.emit( 'jug2', { status: FILL } );
				},
				timeout: 'flashing',
				_onExit: function() {
					clearTimeout( this.timer );
				}
			},
			flashing: {
				_onEnter: function() {
					this.timer = setTimeout( function() {
						this.handle( 'timeout' );
					}.bind( this ), 5000 );
					this.emit( 'jug2', { status: EMPTY, flashing: true } );
				},
				timeout: 'dontwalk',
				_onExit: function() {
					clearTimeout( this.timer );
				}
			},
			dontwalk: {
				_onEnter: function() {
					this.timer = setTimeout( function() {
						this.handle( 'timeout' );
					}.bind( this ), 1000 );
				},
				_reset: 'walking',
				_onExit: function() {
					clearTimeout( this.timer );
				}
			}
		}
	} );

	// // Parent FSM
	var jugManager = new machina.Fsm( {
		namespace: 'jugManager',
		initialState: 'jug1Enabled',
		eventListeners: {
			'*': [ function( eventName, data ) {
					switch ( eventName ) {
						case 'transition' :
							writeToDom( eventName, data );
							console.log( data.namespace, data.fromState, '->', data.toState );
							break;
						case 'jug1' :
							writeToDom( eventName, data );
							console.log( 'vehicles', data.status );
							break;
						case 'jug2':
							writeToDom( eventName, data );
							if ( data.flashing ) {
								console.log( 'jug2', data.status, '(flashing)' );
							} else {
								console.log( 'jug2', data.status );
							}
							break;
						default:

							break;
					}
				}
			]
		},
		states: {
			vehiclesEnabled: {
				// after _onEnter execs, send 'reset' input down the hierarchy
				_onEnter: function() {
					this.emit( 'jug2', { status: EMPTY } );
				},
				timeout: 'jug2Enabled',
				_child: jug1,
			},
			jug2Enabled: {
				_onEnter: function() {
					this.emit( 'vehicles', { status: TRANSFER_OUT } );
				},
				timeout: 'vehiclesEnabled',
				_child: jug2
			}
		}
	} );

	this.app = {
		jug1: jug1,
		jug2: jug2,
		jugManager: jugManager
	};

	jugManager.handle( 'jug2Waiting' );
});